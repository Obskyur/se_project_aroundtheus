!function(){"use strict";const t={};class e{constructor(t,e,s){this._data=t,this._cardSelector=e,this._handleImageClick=s,this._cardElement=document.querySelector(`${this._cardSelector}`).content.firstElementChild.cloneNode(!0),this._imageElement=this._cardElement.querySelector(".card__image"),this._descriptionElement=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}getData(){return this._data}getElement(){return this._setCardValues(),this._setEventListeners(),this._cardElement}_handleDelete(t){t.target.closest(".card").remove()}_handleLike(t){t.target.classList.toggle("card__like-button_active")}_setCardValues(){this._imageElement.src=this._data.link,this._imageElement.alt=this._data.name,this._descriptionElement.textContent=this._data.name}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLike),this._deleteButton.addEventListener("click",this._handleDelete),this._imageElement.addEventListener("click",(()=>this._handleImageClick(this)))}}class s{constructor(t,e){this._settings=t,this._formEl=e,this._inputFields=[...e.querySelectorAll(this._settings.inputSelector)],this._submitButton=e.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(this._inputFields,this._submitButton,this._settings),this._inputFields.forEach((t=>{this._hideInputError(t)}))}_showInputError(t){const e=this._formEl.querySelector(`#${t.id}-error`);t.classList.add(this._settings.inputErrorClass),e.classList.add(this._settings.errorClass),e.textContent=t.validationMessage}_hideInputError(t){const e=this._formEl.querySelector(`#${t.id}-error`);t.classList.remove(this._settings.inputErrorClass),e.classList.remove(this._settings.errorClass),e.textContent=""}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalid(t){return!t.every((t=>t.validity.valid))}_setEventListeners(){this._formEl.addEventListener("submit",(t=>{t.preventDefault(),this._disableButton(this._submitButton,this._settings)})),this._inputFields.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalid(this._inputFields)?this._disableButton():this._enableButton()}}class n{constructor(t){this._popup=document.querySelector(t)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(t=>{(t.target.classList.contains("popup__close")||t.target.classList.contains("popup_opened"))&&this.close()}))}}class i extends n{constructor(t,e){super(t),this._popupForm=this._popup.querySelector(".popup__form"),this._inputs=this._popupForm.querySelectorAll(".popup__input"),this._handleFormSubmit=e,this.setEventListeners()}setEventListeners=()=>{super.setEventListeners(),this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close(),t.target.reset()}))};setInputValues(t){this._inputs.forEach((e=>{e.value=t[e.name]}))}_getInputValues(){const t={};return this._inputs.forEach((e=>{t[e.name]=e.value})),t}}const o=new class{constructor(t,e){this._profName=document.querySelector(t),this._occupation=document.querySelector(e)}getUserInfo(){return{name:this._profName.textContent,occupation:this._occupation.textContent}}setUserInfo(t,e){this._profName.textContent=t,this._occupation.textContent=e}}(".profile__title",".profile__description"),r=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button");r.addEventListener("click",(()=>{const{name:e,occupation:s}=o.getUserInfo();l.open(),l.setInputValues({title:e,description:s}),t["edit-profile-form"].resetValidation()})),a.addEventListener("click",(()=>{c.open(),t["add-card-form"].resetValidation()}));const l=new i("#edit-profile-popup",(function(t){let{title:e,description:s}=t;o.setUserInfo(e,s)})),c=new i("#add-card-popup",(function(t){let{title:e,url:s}=t;const n={name:e,link:s};u.addItem(_(n))})),u=new class{constructor(t,e){let{items:s,renderer:n}=t;this._items=s,this._renderer=n,this._container=document.querySelector(e),this.renderItems()}addItem(t){this._container.prepend(t)}_clear(){this._container.innerHTML=""}renderItems(){this._clear(),this._items.forEach((t=>{const e=this._renderer(t);this.addItem(e)}))}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg "}],renderer:_},".cards__list"),p=new class extends n{constructor(t){super(t),this._imageElement=this._popup.querySelector(".popup__image"),this._captionElement=this._popup.querySelector(".popup__caption"),this.setEventListeners()}open(t){let{name:e,link:s}=t;super.open(),this._captionElement.textContent=e,this._imageElement.alt=e,this._imageElement.src=s}}("#image-popup");function _(t){return new e(t,"#card-template",d).getElement()}function d(t){p.open(t.getData())}var h;h={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},[...document.querySelectorAll(h.formSelector)].forEach((e=>{const n=new s(h,e),i=e.getAttribute("name");t[i]=n,n.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,