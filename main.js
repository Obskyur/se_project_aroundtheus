!function(){"use strict";const e={};class t{constructor(e,t,s,i,n){this._data=e,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=n,this._cardElement=document.querySelector(`${this._cardSelector}`).content.firstElementChild.cloneNode(!0),this._imageElement=this._cardElement.querySelector(".card__image"),this._descriptionElement=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}getData(){return this._data}getElement(){return this._setCardValues(),this._setEventListeners(),this._cardElement}setLike(){this._data.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_handleDelete(e){this._handleDeleteClick(e)}_handleLike(e){e._data.isLiked=!e._data.isLiked,this._handleLikeClick(e)}_setCardValues(){this._imageElement.src=this._data.link,this._imageElement.alt=this._data.name,this._descriptionElement.textContent=this._data.name,this._data.isLiked&&this._likeButton.classList.add("card__like-button_active")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLike(this))),this._deleteButton.addEventListener("click",(()=>this._handleDelete(this))),this._imageElement.addEventListener("click",(()=>this._handleImageClick(this)))}}class s{constructor(e,t){this._settings=e,this._formEl=t,this._inputFields=[...t.querySelectorAll(this._settings.inputSelector)],this._submitButton=t.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(this._inputFields,this._submitButton,this._settings),this._inputFields.forEach((e=>{this._hideInputError(e)}))}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalid(e){return!e.every((e=>e.validity.valid))}_setEventListeners(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._inputFields.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalid(this._inputFields)?this._disableButton():this._enableButton()}}class i{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t),this.renderItems()}addItem(e){this._items.unshift(e),this.renderItem(e,!1)}_clear(){this._container.innerHTML=""}deleteItem(e){this._items.splice(this._items.findIndex((t=>t._id==e._id)),1)}renderItem(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.append(this._renderer(e)):this._container.prepend(this._renderer(e))}renderItems(){this._clear(),this._items.forEach((e=>{this.renderItem(e,!0)}))}setItems(e){this._items=e}}class n{constructor(e){this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup__close")||e.target.classList.contains("popup_opened"))&&this.close()}))}}class r extends n{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".popup__form"),this._inputs=this._popupForm.querySelectorAll(".popup__input"),this._handleFormSubmit=t,this._submitBtn=this._popupForm.querySelector(".popup__button"),this._submitBtnText=this._submitBtn.textContent,this.setEventListeners()}open(){super.open(),setTimeout((()=>this._inputs[0].focus()),700)}renderLoading(e,t){this._submitBtn.textContent=e?t:this._submitBtnText}reset(){this._popupForm.reset()}setEventListeners=()=>{super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))};setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}}const o=new class{constructor(e,t,s){this._profImage=document.querySelector(e),this._profName=document.querySelector(t),this._occupation=document.querySelector(s)}getUserInfo(){return{name:this._profName.textContent,occupation:this._occupation.textContent}}setUserImage(e){this._profImage.src=e}setUserInfo(e,t){this._profName.textContent=e,this._occupation.textContent=t}}(".profile__image",".profile__title",".profile__description"),a=document.querySelector(".profile__edit-button"),u=document.querySelector(".profile__image-update"),d=document.querySelector(".profile__add-button");a.addEventListener("click",(()=>{const{name:t,occupation:s}=o.getUserInfo();h.renderLoading(!1),h.open(),h.setInputValues({title:t,description:s}),e["edit-profile-form"].resetValidation()})),u.addEventListener("click",(()=>{l.renderLoading(!1),l.open(),e["edit-profile-image-form"].resetValidation()})),d.addEventListener("click",(()=>{_.open(),e["add-card-form"].resetValidation()}));const h=new r("#edit-profile-popup",(function(e){let{title:t,description:s}=e;E((function(){return k.setUser({name:t,about:s}).then((e=>{let{name:t,about:s}=e;return o.setUserInfo(t,s)}))}),h)})),l=new r("#edit-profile-image-popup",(function(e){let{url:t}=e;E((function(){return k.setUserPicture(t).then((()=>o.setUserImage(t)))}),l)})),_=new r("#add-card-popup",(function(e){let{title:t,url:s}=e;E((function(){return k.addCard({name:t,link:s}).then((e=>p.addItem(e)))}),_)})),c=new class extends n{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".popup__form"),this._handleFormSubmit=t,this._submitBtn=this._popupForm.querySelector(".popup__button"),this._submitBtnText=this._submitBtn.textContent,this.setEventListeners()}renderLoading(e,t){this._submitBtn.textContent=e?t:this._submitBtnText}reset(){this._popupForm.reset()}setEventListeners=()=>{super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#confirm-delete-popup",(function(){E((function(){return k.deleteCard(m).then((()=>{p.deleteItem(m),p.renderItems()}))}),c,"Deleting...")}));let p,m;const g=new class extends n{constructor(e){super(e),this._imageElement=this._popup.querySelector(".popup__image"),this._captionElement=this._popup.querySelector(".popup__caption"),this.setEventListeners()}open(e){let{name:t,link:s}=e;super.open(),this._captionElement.textContent=t,this._imageElement.alt=t,this._imageElement.src=s}}("#image-popup");function E(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close(),t.reset()})).catch(console.error).finally((()=>t.renderLoading(!1)))}function f(e){return new t(e,"#card-template",b,L,v).getElement()}function L(e){m=e.getData(),c.renderLoading(!1),c.open()}function b(e){g.open(e.getData())}function v(e){m=e.getData(),k.toggleLike(m).then((()=>e.setLike())).catch(console.error)}var S;S={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},[...document.querySelectorAll(S.formSelector)].forEach((t=>{const i=new s(S,t),n=t.getAttribute("name");e[n]=i,i.enableValidation()}));const k=new class{constructor(e){this._baseURL=e.baseURL,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._handleResponse)}addCard(e){return this._request(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)})}deleteCard(e){return this._request(`${this._baseURL}/cards/${e._id}`,{method:"DELETE",headers:this._headers})}getCards(){return this._request(`${this._baseURL}/cards`,{method:"GET",headers:this._headers})}getPageInfo(){return Promise.all([this.getCards(),this.getUser()])}getUser(){return this._request(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers})}setUser(e){return this._request(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)})}setUserPicture(e){return this._request(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}toggleLike(e){return this._request(`${this._baseURL}/cards/${e._id}/likes`,{method:e.isLiked?"PUT":"DELETE",headers:this._headers})}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f88f7f13-d094-4973-ab37-f03c8d3d09a5","Content-Type":"application/json"}});k.getPageInfo().then((e=>{let[t,s]=e;o.setUserImage(s.avatar),o.setUserInfo(s.name,s.about),p=new i({items:t,renderer:f},".cards__list")})).catch(console.error)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,