!function(){"use strict";const e={};class t{constructor(e,t,s,i,n){this._data=e,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=n,this._cardElement=document.querySelector(`${this._cardSelector}`).content.firstElementChild.cloneNode(!0),this._imageElement=this._cardElement.querySelector(".card__image"),this._descriptionElement=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}getData(){return this._data}getElement(){return this._setCardValues(),this._setEventListeners(),this._cardElement}_handleDelete(e){this._handleDeleteClick(e)}_handleLike(e){e._data.isLiked=!e._data.isLiked,this._handleLikeClick(e)}_setCardValues(){this._imageElement.src=this._data.link,this._imageElement.alt=this._data.name,this._descriptionElement.textContent=this._data.name,this._data.isLiked&&this._likeButton.classList.add("card__like-button_active")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLike(this))),this._deleteButton.addEventListener("click",(()=>this._handleDelete(this))),this._imageElement.addEventListener("click",(()=>this._handleImageClick(this)))}}class s{constructor(e,t){this._settings=e,this._formEl=t,this._inputFields=[...t.querySelectorAll(this._settings.inputSelector)],this._submitButton=t.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(this._inputFields,this._submitButton,this._settings),this._inputFields.forEach((e=>{this._hideInputError(e)}))}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalid(e){return!e.every((e=>e.validity.valid))}_setEventListeners(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton(this._submitButton,this._settings)})),this._inputFields.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalid(this._inputFields)?this._disableButton():this._enableButton()}}class i{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t),this.renderItems()}addItem(e){this._items.unshift(e),this.renderItem(e,!1)}_clear(){this._container.innerHTML=""}deleteItem(e){this._items=this._items.filter((t=>{t._id,e._id}))}renderItem(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.append(this._renderer(e)):this._container.prepend(this._renderer(e))}renderItems(){this._clear(),this._items.forEach((e=>{this.renderItem(e,!0)}))}setItems(e){this._items=e}}class n{constructor(e){this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup__close")||e.target.classList.contains("popup_opened"))&&this.close()}))}}class r extends n{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".popup__form"),this._inputs=this._popupForm.querySelectorAll(".popup__input"),this._handleFormSubmit=t,this._buttonText=this._popupForm.querySelector(".popup__button"),this.setEventListeners()}saving(e){console.log(this._buttonText),this._buttonText.textContent=e?"Saving...":"Save"}setEventListeners=()=>{super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),e.target.reset()}))};setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}}const o=new class{constructor(e,t){this._profName=document.querySelector(e),this._occupation=document.querySelector(t)}getUserInfo(){return{name:this._profName.textContent,occupation:this._occupation.textContent}}setUserInfo(e,t){this._profName.textContent=e,this._occupation.textContent=t}}(".profile__title",".profile__description"),a=document.querySelector(".profile__image"),l=document.querySelector(".profile__edit-button"),h=document.querySelector(".profile__image-update"),c=document.querySelector(".profile__add-button");l.addEventListener("click",(()=>{const{name:t,occupation:s}=o.getUserInfo();d.saving(!1),d.open(),d.setInputValues({title:t,description:s}),e["edit-profile-form"].resetValidation()})),h.addEventListener("click",(()=>{u.saving(!1),u.open()})),c.addEventListener("click",(()=>{_.open(),e["add-card-form"].resetValidation()}));const d=new r("#edit-profile-popup",(function(e){let{title:t,description:s}=e;d.saving(!0),y.setUser({name:t,about:s}).then((e=>{let{name:t,about:s}=e;o.setUserInfo(t,s)})).catch((e=>console.error(e))),d.close()})),u=new r("#edit-profile-image-popup",(function(e){let{url:t}=e;console.log(t),u.saving(!0),a.src=t,y.setUserPicture(t).then((e=>{console.log(e),u.close()})).catch((e=>console.error(e)))})),_=new r("#add-card-popup",(function(e){let{title:t,url:s}=e;y.addCard({name:t,link:s}).then((e=>{m.addItem(e),_.close()})).catch((e=>console.error(e)))})),p=new class extends n{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".popup__form"),this._handleFormSubmit=t,this._buttonText=this._popupForm.querySelector(".popup__button"),this.setEventListeners()}deleting(e){this._buttonText.textContent=e?"Deleting...":"Yes"}setEventListeners=()=>{super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(),e.target.reset()}))}}("#confirm-delete-popup",(function(){p.deleting(!0),y.deleteCard(g).then((()=>y.getPageInfo().then((e=>{let[t]=e;console.log(t),m.setItems(t),m.renderItems(),p.close()})))).catch((e=>console.log(e)))}));let m,g;const E=new class extends n{constructor(e){super(e),this._imageElement=this._popup.querySelector(".popup__image"),this._captionElement=this._popup.querySelector(".popup__caption"),this.setEventListeners()}open(e){let{name:t,link:s}=e;super.open(),this._captionElement.textContent=t,this._imageElement.alt=t,this._imageElement.src=s}}("#image-popup");function f(e){return new t(e,"#card-template",b,v,L).getElement()}function v(e){g=e.getData(),p.deleting(!1),p.open()}function b(e){E.open(e.getData())}function L(e){g=e.getData(),y.toggleLike(g).then(m.renderItems()).catch((e=>console.log(e)))}var S;document.querySelector("#confirm-delete-button"),S={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},[...document.querySelectorAll(S.formSelector)].forEach((t=>{const i=new s(S,t),n=t.getAttribute("name");e[n]=i,i.enableValidation()}));const y=new class{constructor(e){this._baseURL=e.baseURL,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}addCard(e){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseURL}/cards/${e._id}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}getCards(){return fetch(`${this._baseURL}/cards`,{method:"GET",headers:this._headers}).then(this._handleResponse)}getPageInfo(){return Promise.all([this.getCards(),this.getUser()])}getUser(){return fetch(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers}).then(this._handleResponse)}setUser(e){return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}setUserPicture(e){return console.log(e),fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}toggleLike(e){return fetch(`${this._baseURL}/cards/${e._id}/likes`,{method:e.isLiked?"PUT":"DELETE",headers:this._headers}).then(this._handleResponse)}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f88f7f13-d094-4973-ab37-f03c8d3d09a5","Content-Type":"application/json"}});y.getPageInfo().then((e=>{let[t,s]=e;console.log(t),a.src=s.avatar,o.setUserInfo(s.name,s.about),m=new i({items:t,renderer:f},".cards__list")})).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTM0ssS0FBSzBLLFNBQ2RXLEtBQU1DLEtBQUtDLFVBQVVJLEtBQ3BCL0MsS0FBSzVJLEtBQUs0SyxnQkFDZixDQUVBekIsY0FBQUEsQ0FBZTFILEdBRWIsT0FEQXdGLFFBQVFDLElBQUl6RixHQUNMMEosTUFBTyxHQUFFbkwsS0FBS3dLLDJCQUE0QixDQUMvQ1ksT0FBUSxRQUNSVCxRQUFTM0ssS0FBSzBLLFNBQ2RXLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJLLE9BQVFuSyxNQUVUbUgsS0FBSzVJLEtBQUs0SyxnQkFDZixDQUVBWCxVQUFBQSxDQUFXNUksR0FDVCxPQUFPOEosTUFBTyxHQUFFbkwsS0FBS3dLLGtCQUFrQm5KLEVBQUtpRSxZQUFhLENBQ3ZEOEYsT0FBUS9KLEVBQUtFLFFBQVUsTUFBUSxTQUMvQm9KLFFBQVMzSyxLQUFLMEssV0FDYjlCLEtBQUs1SSxLQUFLNEssZ0JBQ2YsR0ppRWtCLENBQ2xCSCxRQUFTLGtEQUNURSxRQUFTLENBQ1BrQixjQUFlLHVDQUNmLGVBQWdCLHNCQUtwQnBELEVBQUlrQixjQUNEZixNQUFLa0QsSUFBMkIsSUFBekJqQyxFQUFXOEIsR0FBU0csRUFDMUI3RSxRQUFRQyxJQUFJMkMsR0FHWjlCLEVBQWF2RyxJQUFNbUssRUFBU0MsT0FDNUJyRSxFQUFLTyxZQUFZNkQsRUFBU2hLLEtBQU1nSyxFQUFTaEQsT0FHekNXLEVBQWMsSUFBSWxGLEVBQ2hCLENBQUVHLE1BQU9zRixFQUFXckYsU0FBVXdGLEdBQzlCLGVBQ0QsSUFFRmxCLE9BQU1DLEdBQU85QixRQUFRK0IsTUFBTUQsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBDb25maXJtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVlVxyXG4g4pSCIENBUkRTIOKUglxyXG4g4pWY4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQKi9cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gIH0sXHJcblxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhdGVtYXIuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGcgXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbi8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgVkFMSURBVE9SIOKUglxyXG4g4pWY4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQKi9cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVJbWFnZUNsaWNrLCBoYW5kbGVEZWxldGVDbGljaywgaGFuZGxlTGlrZUNsaWNrKSB7XHJcbiAgICAvLyogUGFzc2VkIHZhbHVlczpcclxuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xyXG4gICAgLy8qIFBSSVZBVEUgRE9NIE1FTUJFUlM6XHJcbiAgICAvLyBET00gQ2FyZCBFbGVtZW50XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX2NhcmRTZWxlY3Rvcn1gKVxyXG4gICAgICAuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAvLyBET00gaW1hZ2UgZWxlbWVudFxyXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50ID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIC8vIERPTSB0aXRsZSBlbGVtZW50XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xyXG4gICAgLy8gRE9NIGxpa2UgYnV0dG9uIGVsZW1lbnRcclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgLy8gRE9NIGRlbGV0ZSBidXR0b24gZWxlbWVudFxyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gIH1cclxuXHJcbiAgZ2V0RWxlbWVudCgpIHtcclxuICAgIHRoaXMuX3NldENhcmRWYWx1ZXMoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRGVsZXRlKGNhcmQpIHtcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKGNhcmQpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2UoY2FyZCkge1xyXG4gICAgY2FyZC5fZGF0YS5pc0xpa2VkID0gIWNhcmQuX2RhdGEuaXNMaWtlZDtcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayhjYXJkKTtcclxuICB9XHJcblxyXG4gIF9zZXRDYXJkVmFsdWVzKCkge1xyXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2RhdGEubGluaztcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5hbHQgPSB0aGlzLl9kYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLl9kYXRhLm5hbWU7XHJcbiAgICBpZiAodGhpcy5fZGF0YS5pc0xpa2VkKVxyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyBMaWtlIGJ1dHRvblxyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5faGFuZGxlTGlrZSh0aGlzKSk7XHJcblxyXG4gICAgLy8gRGVsZXRlIGJ1dHRvblxyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVEZWxldGUodGhpcykpO1xyXG5cclxuICAgIC8vIEltYWdlXHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sodGhpcylcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWwpIHtcclxuICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICB0aGlzLl9mb3JtRWwgPSBmb3JtRWw7XHJcbiAgICAvLyBGaW5kIEZvcm0gRmllbGRzXHJcbiAgICB0aGlzLl9pbnB1dEZpZWxkcyA9IFtcclxuICAgICAgLi4uZm9ybUVsLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3RvciksXHJcbiAgICBdO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHRoaXMuX3NldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZShcclxuICAgICAgdGhpcy5faW5wdXRGaWVsZHMsXHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbixcclxuICAgICAgdGhpcy5fc2V0dGluZ3NcclxuICAgICk7XHJcbiAgICB0aGlzLl9pbnB1dEZpZWxkcy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgSU5QVVQgRklFTEQgRlVOQ1RJT05TIOKUglxyXG4g4pWY4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQKi9cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgY29uc3QgZXJyb3JFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsLmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsLnRleHRDb250ZW50ID0gaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvckVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWwudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKSB7XHJcbiAgICBpZiAoIWlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkKGlucHV0RmllbGRzKSB7XHJcbiAgICByZXR1cm4gIWlucHV0RmllbGRzLmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vIFN1Ym1pdCBMaXN0ZW5lclxyXG4gICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fZGlzYWJsZUJ1dHRvbih0aGlzLl9zdWJtaXRCdXR0b24sIHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFZhbGlkYXRlIG9uIElucHV0IExpc3RlbmVyXHJcbiAgICB0aGlzLl9pbnB1dEZpZWxkcy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgQlVUVE9OIEZVTkNUSU9OUyDilIJcclxuIOKVmOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCovXHJcbiAgX2Rpc2FibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBfZW5hYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkKHRoaXMuX2lucHV0RmllbGRzKSkge1xyXG4gICAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9lbmFibGVCdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICB0aGlzLnJlbmRlckl0ZW1zKCk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGNhcmRPYmopIHtcclxuICAgIHRoaXMuX2l0ZW1zLnVuc2hpZnQoY2FyZE9iaik7XHJcbiAgICB0aGlzLnJlbmRlckl0ZW0oY2FyZE9iaiwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgX2NsZWFyKCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBkZWxldGVJdGVtKGNhcmRPYmopIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gdGhpcy5faXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICBpdGVtLl9pZCAhPSBjYXJkT2JqLl9pZDtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtKGNhcmRPYmosIHNlcnZlciA9IGZhbHNlKSB7XHJcbiAgICBzZXJ2ZXIgP1xyXG4gICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKHRoaXMuX3JlbmRlcmVyKGNhcmRPYmopKSA6XHJcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKHRoaXMuX3JlbmRlcmVyKGNhcmRPYmopKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5fY2xlYXIoKTtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5yZW5kZXJJdGVtKGl0ZW0sIHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRJdGVtcyhpdGVtcykge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcInBvcHVwX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXBfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwX19jbG9zZVwiKSB8fFxyXG4gICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBfb3BlbmVkXCIpXHJcbiAgICAgIClcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX2lucHV0cyA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwX19pbnB1dFwiKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5fYnV0dG9uVGV4dCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19idXR0b25cIik7XHJcbiAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBzYXZpbmcoc2hvdykge1xyXG4gICAgY29uc29sZS5sb2codGhpcy5fYnV0dG9uVGV4dCk7XHJcbiAgICBzaG93XHJcbiAgICAgID8gKHRoaXMuX2J1dHRvblRleHQudGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiKVxyXG4gICAgICA6ICh0aGlzLl9idXR0b25UZXh0LnRleHRDb250ZW50ID0gXCJTYXZlXCIpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgZXZ0LnRhcmdldC5yZXNldCgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xyXG4gICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5uYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgZGF0YSA9IHt9O1xyXG5cclxuICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBkYXRhW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHsgY29uZmlnLCBmb3JtVmFsaWRhdG9ycyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybVwiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2VcIjtcclxuaW1wb3J0IFBvcHVwQ29uZmlybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cENvbmZpcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvXCI7XHJcblxyXG4vKuKVkOKVkOKVkOKVkOKVkOKVkOKVlVxyXG4g4pSCIFVTRVIg4pSCXHJcbiDilZjilZDilZDilZDilZDilZDilZAqL1xyXG5jb25zdCB1c2VyID0gbmV3IFVzZXJJbmZvKFwiLnByb2ZpbGVfX3RpdGxlXCIsIFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCIpO1xyXG5jb25zdCBwcm9maWxlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlXCIpO1xyXG5cclxuLyrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZVcclxuIOKUgiBQQUdFIEJVVFRPTlMg4pSCXHJcbiDilZjilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAqL1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xyXG5leHBvcnQgY29uc3QgZWRpdEltYWdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZS11cGRhdGVcIik7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5cclxuZWRpdFByb2ZpbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB7IG5hbWUsIG9jY3VwYXRpb24gfSA9IHVzZXIuZ2V0VXNlckluZm8oKTtcclxuICBlZGl0UHJvZmlsZVBvcHVwLnNhdmluZyhmYWxzZSk7XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5vcGVuKCk7XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5zZXRJbnB1dFZhbHVlcyh7IHRpdGxlOiBuYW1lLCBkZXNjcmlwdGlvbjogb2NjdXBhdGlvbiB9KTtcclxuICBmb3JtVmFsaWRhdG9yc1tcImVkaXQtcHJvZmlsZS1mb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59KTtcclxuZWRpdEltYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZWRpdFByb2ZpbGVJbWFnZVBvcHVwLnNhdmluZyhmYWxzZSk7XHJcbiAgZWRpdFByb2ZpbGVJbWFnZVBvcHVwLm9wZW4oKTtcclxufSlcclxuYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJhZGQtY2FyZC1mb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59KTtcclxuXHJcbi8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgRk9STVMg4pSCXHJcbiDilZjilZDilZDilZDilZDilZDilZDilZAqL1xyXG5jb25zdCBlZGl0UHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjZWRpdC1wcm9maWxlLXBvcHVwXCIsXHJcbiAgaGFuZGxlUHJvZmlsZVNhdmVcclxuKTtcclxuY29uc3QgZWRpdFByb2ZpbGVJbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjZWRpdC1wcm9maWxlLWltYWdlLXBvcHVwXCIsXHJcbiAgaGFuZGxlUHJvZmlsZUltYWdlU2F2ZVxyXG4pO1xyXG5jb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNhZGQtY2FyZC1wb3B1cFwiLCBoYW5kbGVBZGRDYXJkKTtcclxuY29uc3QgY29uZmlybURlbGV0ZVBvcHVwID0gbmV3IFBvcHVwQ29uZmlybSgnI2NvbmZpcm0tZGVsZXRlLXBvcHVwJywgaGFuZGxlRGVsZXRlQ2FyZCk7XHJcblxyXG4vKuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVlVxyXG4g4pSCIENBUkRTIOKUglxyXG4g4pWY4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQKi9cclxubGV0IGNhcmRTZWN0aW9uO1xyXG5sZXQgdGFyZ2V0Q2FyZDtcclxuXHJcbi8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgRVZFTlQgSEFORExFUlMg4pSCXHJcbiDilZjilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAqL1xyXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI2ltYWdlLXBvcHVwXCIpO1xyXG5jb25zdCBkZWxldGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbmZpcm0tZGVsZXRlLWJ1dHRvblwiKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmQoeyB0aXRsZSwgdXJsIH0pIHtcclxuICBhcGkuYWRkQ2FyZCh7bmFtZTogdGl0bGUsIGxpbms6IHVybH0pXHJcbiAgLnRoZW4oY2FyZE9iaiA9PiB7XHJcbiAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGNhcmRPYmopO1xyXG4gICAgYWRkQ2FyZFBvcHVwLmNsb3NlKCk7XHJcbiAgfSlcclxuICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlQ3JlYXRlQ2FyZChjYXJkKSB7XHJcbiAgcmV0dXJuIG5ldyBDYXJkKGNhcmQsIFwiI2NhcmQtdGVtcGxhdGVcIiwgaGFuZGxlSW1hZ2VDbGljaywgaGFuZGxlRGVsZXRlQ2xpY2ssIGhhbmRsZUxpa2VDbGljaykuZ2V0RWxlbWVudCgpO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNhcmQoKSB7XHJcbiAgY29uZmlybURlbGV0ZVBvcHVwLmRlbGV0aW5nKHRydWUpO1xyXG4gIGFwaS5kZWxldGVDYXJkKHRhcmdldENhcmQpXHJcbiAgICAudGhlbigoKSA9PiBhcGkuZ2V0UGFnZUluZm8oKVxyXG4gICAgICAudGhlbigoW2NhcmRBcnJheV0pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhjYXJkQXJyYXkpO1xyXG4gICAgICAgIGNhcmRTZWN0aW9uLnNldEl0ZW1zKGNhcmRBcnJheSk7XHJcbiAgICAgICAgY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcclxuICAgICAgICBjb25maXJtRGVsZXRlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgfSlcclxuICAgIClcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ2xpY2soY2FyZCkge1xyXG4gIHRhcmdldENhcmQgPSBjYXJkLmdldERhdGEoKTtcclxuICBjb25maXJtRGVsZXRlUG9wdXAuZGVsZXRpbmcoZmFsc2UpO1xyXG4gIGNvbmZpcm1EZWxldGVQb3B1cC5vcGVuKCk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkKSB7XHJcbiAgaW1hZ2VQb3B1cC5vcGVuKGNhcmQuZ2V0RGF0YSgpKTtcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soY2FyZCkge1xyXG4gIHRhcmdldENhcmQgPSBjYXJkLmdldERhdGEoKTtcclxuICBhcGkudG9nZ2xlTGlrZSh0YXJnZXRDYXJkKVxyXG4gIC50aGVuKGNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKCkpXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlSW1hZ2VTYXZlKHt1cmx9KSB7XHJcbiAgY29uc29sZS5sb2codXJsKTtcclxuICBlZGl0UHJvZmlsZUltYWdlUG9wdXAuc2F2aW5nKHRydWUpO1xyXG4gIHByb2ZpbGVJbWFnZS5zcmMgPSB1cmw7XHJcbiAgYXBpLnNldFVzZXJQaWN0dXJlKHVybClcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgY29uc29sZS5sb2cocmVzKTtcclxuICAgICAgZWRpdFByb2ZpbGVJbWFnZVBvcHVwLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVTYXZlKHsgdGl0bGUsIGRlc2NyaXB0aW9uIH0pIHtcclxuICBlZGl0UHJvZmlsZVBvcHVwLnNhdmluZyh0cnVlKTtcclxuICBhcGkuc2V0VXNlcih7IG5hbWU6IHRpdGxlLCBhYm91dDogZGVzY3JpcHRpb24gfSlcclxuICAgIC50aGVuKCh7bmFtZSwgYWJvdXR9KSA9PiB7XHJcbiAgICAgIHVzZXIuc2V0VXNlckluZm8obmFtZSwgYWJvdXQpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcclxuICBlZGl0UHJvZmlsZVBvcHVwLmNsb3NlKCk7XHJcbn1cclxuXHJcbi8q4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWVXHJcbiDilIIgVkFMSURBVE9SIOKUglxyXG4g4pWY4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQKi9cclxuZnVuY3Rpb24gZW5hYmxlVmFsaWRhdGlvbihjb25maWcpIHtcclxuICBjb25zdCBmb3JtRWxzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLmZvcm1TZWxlY3RvcildO1xyXG4gIGZvcm1FbHMuZm9yRWFjaCgoZm9ybUVsKSA9PiB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1FbCk7XHJcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xyXG5cclxuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcclxuICAgIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVUkw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcImY4OGY3ZjEzLWQwOTQtNDk3My1hYjM3LWYwM2M4ZDNkMDlhNVwiLFxyXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgfSxcclxufSk7XHJcblxyXG4vLyBJbml0aWFsaXplIFBhZ2UgZnJvbSBTZXJ2ZXI6XHJcbmFwaS5nZXRQYWdlSW5mbygpXHJcbiAgLnRoZW4oKFtjYXJkQXJyYXksIHVzZXJJbmZvXSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coY2FyZEFycmF5KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgVXNlciBEZXRhaWxzIGZyb20gU2VydmVyXHJcbiAgICBwcm9maWxlSW1hZ2Uuc3JjID0gdXNlckluZm8uYXZhdGFyO1xyXG4gICAgdXNlci5zZXRVc2VySW5mbyh1c2VySW5mby5uYW1lLCB1c2VySW5mby5hYm91dCk7XHJcbiAgICBcclxuICAgIC8vIFVwZGF0ZSBDYXJkcyBmcm9tIFNlcnZlclxyXG4gICAgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAgeyBpdGVtczogY2FyZEFycmF5LCByZW5kZXJlcjogaGFuZGxlQ3JlYXRlQ2FyZCB9LFxyXG4gICAgICBcIi5jYXJkc19fbGlzdFwiXHJcbiAgICApO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IocHJvZk5hbWVFbGVtZW50U2VsZWN0b3IsIG9jY3VwYXRpb25FbGVtZW50U2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3Byb2ZOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9mTmFtZUVsZW1lbnRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9vY2N1cGF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvY2N1cGF0aW9uRWxlbWVudFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fcHJvZk5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIG9jY3VwYXRpb246IHRoaXMuX29jY3VwYXRpb24udGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8obmFtZSwgb2NjdXBhdGlvbikge1xyXG4gICAgdGhpcy5fcHJvZk5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fb2NjdXBhdGlvbi50ZXh0Q29udGVudCA9IG9jY3VwYXRpb247XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBDb25maXJtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5fYnV0dG9uVGV4dCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19idXR0b25cIik7XHJcbiAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBkZWxldGluZyhzaG93KSB7XHJcbiAgICBzaG93ID9cclxuICAgICAgdGhpcy5fYnV0dG9uVGV4dC50ZXh0Q29udGVudCA9IFwiRGVsZXRpbmcuLi5cIiA6XHJcbiAgICAgIHRoaXMuX2J1dHRvblRleHQudGV4dENvbnRlbnQgPSBcIlllc1wiO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCgpO1xyXG4gICAgICBldnQudGFyZ2V0LnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2FwdGlvblwiKTtcclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5hbHQgPSBuYW1lO1xyXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50LnNyYyA9IGxpbms7XHJcbiAgfVxyXG59XHJcbiIsIi8vIHRva2VuOiBmODhmN2YxMy1kMDk0LTQ5NzMtYWIzNy1mMDNjOGQzZDA5YTVcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9iYXNlVVJMID0gb3B0aW9ucy5iYXNlVVJMO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcclxuICB9XHJcblxyXG4gIF9oYW5kbGVSZXNwb25zZShyZXMpIHtcclxuICAgIHJldHVybiByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgfVxyXG5cclxuICAvLyogQ2FyZCBBZGQgLyBSZW1vdmVcclxuXHJcbiAgLy8vIGNhcmRQcm9wZXJ0aWVzOiBvYmplY3QgY29udGFpbmluZyAnbmFtZScgYW5kICdsaW5rJyBwcm9wZXJ0aWVzXHJcbiAgYWRkQ2FyZChjYXJkUHJvcGVydGllcykge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjYXJkUHJvcGVydGllcyksXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoY2FyZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzLyR7Y2FyZC5faWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIC8vKiBHRVRURVJTXHJcblxyXG4gIGdldENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VJbmZvKCkge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldENhcmRzKCksIHRoaXMuZ2V0VXNlcigpXSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VyKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIC8vKiBTRVRURVJTXHJcblxyXG4gIC8vLyB1c2VySW5mbzogb2JqZWN0IGNvbnRhaW5pbmcgJ25hbWUnIGFuZCAnYWJvdXQnIHByb3BlcnRpZXNcclxuICBzZXRVc2VyKHVzZXJJbmZvKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVSTH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1c2VySW5mbyksXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJQaWN0dXJlKGxpbmspIHtcclxuICAgIGNvbnNvbGUubG9nKGxpbmspO1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGxpbmtcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUxpa2UoY2FyZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzLyR7Y2FyZC5faWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IGNhcmQuaXNMaWtlZCA/IFwiUFVUXCIgOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXSwibmFtZXMiOlsiZm9ybVZhbGlkYXRvcnMiLCJDYXJkIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwidGhpcyIsIl9kYXRhIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX2hhbmRsZUxpa2VDbGljayIsIl9jYXJkRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNsb25lTm9kZSIsIl9pbWFnZUVsZW1lbnQiLCJfZGVzY3JpcHRpb25FbGVtZW50IiwiX2xpa2VCdXR0b24iLCJfZGVsZXRlQnV0dG9uIiwiZ2V0RGF0YSIsImdldEVsZW1lbnQiLCJfc2V0Q2FyZFZhbHVlcyIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9oYW5kbGVEZWxldGUiLCJjYXJkIiwiX2hhbmRsZUxpa2UiLCJpc0xpa2VkIiwic3JjIiwibGluayIsImFsdCIsIm5hbWUiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWwiLCJfc2V0dGluZ3MiLCJfZm9ybUVsIiwiX2lucHV0RmllbGRzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJlbmFibGVWYWxpZGF0aW9uIiwicmVzZXRWYWxpZGF0aW9uIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZm9yRWFjaCIsImlucHV0IiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsImVycm9yRWwiLCJpZCIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc0ludmFsaWQiLCJpbnB1dEZpZWxkcyIsImV2ZXJ5IiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJfZGlzYWJsZUJ1dHRvbiIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJkaXNhYmxlZCIsIl9lbmFibGVCdXR0b24iLCJTZWN0aW9uIiwiX3JlZiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsImFkZEl0ZW0iLCJjYXJkT2JqIiwidW5zaGlmdCIsInJlbmRlckl0ZW0iLCJfY2xlYXIiLCJpbm5lckhUTUwiLCJkZWxldGVJdGVtIiwiZmlsdGVyIiwiaXRlbSIsIl9pZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImFwcGVuZCIsInByZXBlbmQiLCJzZXRJdGVtcyIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cCIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVFc2NDbG9zZSIsIm9wZW4iLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9wb3B1cEZvcm0iLCJfaW5wdXRzIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfYnV0dG9uVGV4dCIsInNhdmluZyIsInNob3ciLCJjb25zb2xlIiwibG9nIiwiX2dldElucHV0VmFsdWVzIiwicmVzZXQiLCJzZXRJbnB1dFZhbHVlcyIsInZhbHVlIiwidXNlciIsInByb2ZOYW1lRWxlbWVudFNlbGVjdG9yIiwib2NjdXBhdGlvbkVsZW1lbnRTZWxlY3RvciIsIl9wcm9mTmFtZSIsIl9vY2N1cGF0aW9uIiwiZ2V0VXNlckluZm8iLCJvY2N1cGF0aW9uIiwic2V0VXNlckluZm8iLCJwcm9maWxlSW1hZ2UiLCJlZGl0UHJvZmlsZUJ1dHRvbiIsImVkaXRJbWFnZUJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJlZGl0UHJvZmlsZVBvcHVwIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImVkaXRQcm9maWxlSW1hZ2VQb3B1cCIsImFkZENhcmRQb3B1cCIsIl9yZWY0IiwiYXBpIiwic2V0VXNlciIsImFib3V0IiwidGhlbiIsIl9yZWY1IiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsIl9yZWYzIiwidXJsIiwic2V0VXNlclBpY3R1cmUiLCJyZXMiLCJhZGRDYXJkIiwiY2FyZFNlY3Rpb24iLCJjb25maXJtRGVsZXRlUG9wdXAiLCJkZWxldGluZyIsImRlbGV0ZUNhcmQiLCJ0YXJnZXRDYXJkIiwiZ2V0UGFnZUluZm8iLCJfcmVmMiIsImNhcmRBcnJheSIsImltYWdlUG9wdXAiLCJfY2FwdGlvbkVsZW1lbnQiLCJoYW5kbGVDcmVhdGVDYXJkIiwidG9nZ2xlTGlrZSIsImNvbmZpZyIsImZvcm1TZWxlY3RvciIsInZhbGlkYXRvciIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIiwib3B0aW9ucyIsIl9iYXNlVVJMIiwiYmFzZVVSTCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsIl9oYW5kbGVSZXNwb25zZSIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJjYXJkUHJvcGVydGllcyIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRDYXJkcyIsImFsbCIsImdldFVzZXIiLCJ1c2VySW5mbyIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJfcmVmNiJdLCJzb3VyY2VSb290IjoiIn0=